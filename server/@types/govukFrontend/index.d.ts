// THIS FILE IS AUTOMATICALLY GENERATED. DON'T MODIFY IT MANUALLY.
// Re-generate this file by running `npm run-script generate-frontend-types`.
// The accordion component is described at https://design-system.service.gov.uk/components/accordion.
export interface GovukFrontendAccordion {
  /*
    Must be unique across the domain of your service if `rememberExpanded` is `true` (as the expanded state of individual instances of the component persists across page loads using [`sessionStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage)). Used as an `id` in the HTML for the accordion as a whole, and also as a prefix for the `id`s of the section contents and the buttons that open them, so that those `id`s can be the target of `aria-labelledby` and `aria-control` attributes.
  */
  id: string

  /*
    Heading level, from `1` to `6`. Default is `2`.
  */
  headingLevel?: number | null // integer

  /*
    Classes to add to the accordion.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the accordion.
  */
  attributes?: Record<string, unknown> | null

  /*
    Whether the expanded/collapsed state of the accordion should be saved when a user leaves the page and restored when they return. Default is `true`.
  */
  rememberExpanded?: boolean | null

  /*
    The text content of the 'Hide all sections' button at the top of the accordion when all sections are expanded.
  */
  hideAllSectionsText?: string | null

  /*
    The text content of the 'Hide' button within each section of the accordion, which is visible when the section is expanded.
  */
  hideSectionText?: string | null

  /*
    Text made available to assistive technologies, like screen-readers, as the final part of the toggle's accessible name when the section is expanded. Defaults to 'Hide this section'.
  */
  hideSectionAriaLabelText?: string | null

  /*
    The text content of the 'Show all sections' button at the top of the accordion when at least one section is collapsed.
  */
  showAllSectionsText?: string | null

  /*
    The text content of the 'Show' button within each section of the accordion, which is visible when the section is collapsed.
  */
  showSectionText?: string | null

  /*
    Text made available to assistive technologies, like screen-readers, as the final part of the toggle's accessible name when the section is collapsed. Defaults to 'Show this section'.
  */
  showSectionAriaLabelText?: string | null

  /*
    An array of sections within the accordion.
  */
  items: GovukFrontendAccordionItem[]
}

export interface GovukFrontendAccordionItem {
  heading?: GovukFrontendAccordionItemHeading | null

  summary?: GovukFrontendAccordionItemSummary | null

  content?: GovukFrontendAccordionItemContent | null

  /*
    Sets whether the section should be expanded when the page loads for the first time. Defaults to `false`.
  */
  expanded?: boolean | null
}

export interface GovukFrontendAccordionItemHeading {
  /*
    The title of each section. If `heading.html` is supplied, this is ignored.
  */
  text?: string | null

  /*
    The HTML content of the header for each section. Used as the title for each section. The header is inside the HTML `<button>` element, so you can only add [phrasing content](https://html.spec.whatwg.org/#phrasing-content) to it.
  */
  html?: string | null
}

export interface GovukFrontendAccordionItemSummary {
  /*
    Text content for summary line. If `summary.html` is supplied, this is ignored.
  */
  text?: string | null

  /*
    The HTML content for the summary line. The summary line is inside the HTML `<button>` element, so you can only add [phrasing content](https://html.spec.whatwg.org/#phrasing-content) to it.
  */
  html?: string | null
}

export interface GovukFrontendAccordionItemContent {
  /*
    The text content of each section, which is hidden when the section is closed. If `content.html` is supplied, this is ignored.
  */
  text?: string | null

  /*
    The HTML content of each section, which is hidden when the section is closed.
  */
  html?: string | null
}

// The back link component is described at https://design-system.service.gov.uk/components/back-link.
export interface GovukFrontendBackLink {
  /*
    Text to use within the back link component. If `html` is provided, the `text` option will be ignored. Defaults to 'Back'.
  */
  text?: string | null

  /*
    HTML to use within the back link component. If `html` is provided, the `text` option will be ignored. Defaults to 'Back'.
  */
  html?: string | null

  /*
    The value of the link's `href` attribute.
  */
  href: string

  /*
    Classes to add to the anchor tag.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the anchor tag.
  */
  attributes?: Record<string, unknown> | null
}

// The breadcrumbs component is described at https://design-system.service.gov.uk/components/breadcrumbs.
export interface GovukFrontendBreadcrumbs {
  /*
    Array of breadcrumbs item objects.
  */
  items: GovukFrontendBreadcrumbsItem[]

  /*
    Classes to add to the breadcrumbs container.
  */
  classes?: string | null

  /*
    When true, the breadcrumbs will collapse to the first and last item only on tablet breakpoint and below.
  */
  collapseOnMobile?: boolean | null

  /*
    HTML attributes (for example data attributes) to add to the breadcrumbs container.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendBreadcrumbsItem {
  /*
    If `html` is set, this is not required. Text to use within the breadcrumbs item. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the breadcrumbs item. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    Link for the breadcrumbs item. If not specified, breadcrumbs item is a normal list item.
  */
  href?: string | null

  /*
    HTML attributes (for example data attributes) to add to the individual crumb.
  */
  attributes?: Record<string, unknown> | null
}

// The button component is described at https://design-system.service.gov.uk/components/button.
export interface GovukFrontendButton {
  /*
    Whether to use an `input`, `button` or `a` element to create the button. In most cases you will not need to set this as it will be configured automatically if you use `href` or `html`.
  */
  element?: string | null

  /*
    If `html` is set, this is not required. Text for the button or link. If `html` is provided, the `text` option will be ignored and `element` will be automatically set to `button` unless `href` is also set, or it has already been defined. This option has no effect if `element` is set to `input`.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML for the button or link. If `html` is provided, the `text` option will be ignored and `element` will be automatically set to `button` unless `href` is also set, or it has already been defined. This option has no effect if `element` is set to `input`.
  */
  html?: string | null

  /*
    Name for the `input` or `button`. This has no effect on `a` elements.
  */
  name?: string | null

  /*
    Type of `input` or `button` â€“ `button`, `submit` or `reset`. Defaults to `submit`. This has no effect on `a` elements.
  */
  type?: string | null

  /*
    Value for the `button` tag. This has no effect on `a` or `input` elements.
  */
  value?: string | null

  /*
    Whether the button should be disabled. For button and input elements, `disabled` and `aria-disabled` attributes will be set automatically.
  */
  disabled?: boolean | null

  /*
    The URL that the button should link to. If this is set, `element` will be automatically set to `a` if it has not already been defined.
  */
  href?: string | null

  /*
    Classes to add to the button component.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the button component.
  */
  attributes?: Record<string, unknown> | null

  /*
    Prevent accidental double clicks on submit buttons from submitting forms multiple times
  */
  preventDoubleClick?: boolean | null

  /*
    Use for the main call to action on your service's start page.
  */
  isStartButton?: boolean | null

  /*
    The ID of the button.
  */
  id?: string | null
}

// The character count component is described at https://design-system.service.gov.uk/components/character-count.
export interface GovukFrontendCharacterCount {
  /*
    The ID of the textarea.
  */
  id: string

  /*
    The name of the textarea, which is submitted with the form data.
  */
  name: string

  /*
    Optional number of textarea rows (default is 5 rows).
  */
  rows?: string | null

  /*
    Optional initial value of the textarea.
  */
  value?: string | null

  /*
    If `maxwords` is set, this is not required. The maximum number of characters. If `maxwords` is provided, the `maxlength` option will be ignored.
  */
  maxlength: string

  /*
    If `maxlength` is set, this is not required. The maximum number of words. If `maxwords` is provided, the `maxlength` option will be ignored.
  */
  maxwords: string

  /*
    The percentage value of the limit at which point the count message is displayed. If this attribute is set, the count message will be hidden by default.
  */
  threshold?: string | null

  /*
    Options for the label component.
  */
  label: GovukFrontendLabel

  /*
    Options for the hint component.
  */
  hint?: GovukFrontendHint | null

  /*
    Options for the error message component. The error message component will not display if you use a falsy value for `errorMessage`, for example `false` or `null`.
  */
  errorMessage?: GovukFrontendErrorMessage | null

  /*
    Options for the form-group wrapper.
  */
  formGroup?: GovukFrontendCharacterCountFormGroup | null

  /*
    Classes to add to the textarea.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the textarea.
  */
  attributes?: Record<string, unknown> | null

  /*
    Optional field to enable or disable the `spellcheck` attribute on the character count.
  */
  spellcheck?: boolean | null

  /*
    Options for the count message.
  */
  countMessage?: GovukFrontendCharacterCountCountMessage | null

  /*
    Message made available to assistive technologies to describe that the component accepts only a limited amount of content. It is visible on the page when JavaScript is unavailable. The component will replace the `%{count}` placeholder with the value of the `maxlength` or `maxwords` parameter.
  */
  textareaDescriptionText?: string | null

  /*
    Message displayed when the number of characters is under the configured maximum, `maxlength`. This message is displayed visually and through assistive technologies. The component will replace the `%{count}` placeholder with the number of remaining characters. This is a [pluralised list of messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).
  */
  charactersUnderLimitText?: Record<string, unknown> | null

  /*
    Message displayed when the number of characters reaches the configured maximum, `maxlength`. This message is displayed visually and through assistive technologies.
  */
  charactersAtLimitText?: string | null

  /*
    Message displayed when the number of characters is over the configured maximum, `maxlength`. This message is displayed visually and through assistive technologies. The component will replace the `%{count}` placeholder with the number of characters above the maximum. This is a [pluralised list of messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).
  */
  charactersOverLimitText?: Record<string, unknown> | null

  /*
    Message displayed when the number of words is under the configured maximum, `maxwords`. This message is displayed visually and through assistive technologies. The component will replace the `%{count}` placeholder with the number of remaining words. This is a [pluralised list of messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).
  */
  wordsUnderLimitText?: Record<string, unknown> | null

  /*
    Message displayed when the number of words reaches the configured maximum, `maxwords`. This message is displayed visually and through assistive technologies.
  */
  wordsAtLimitText?: string | null

  /*
    Message displayed when the number of words is over the configured maximum, `maxwords`. This message is displayed visually and through assistive technologies. The component will replace the `%{count}` placeholder with the number of characters above the maximum. This is a [pluralised list of messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).
  */
  wordsOverLimitText?: Record<string, unknown> | null
}

export interface GovukFrontendCharacterCountFormGroup {
  /*
    Classes to add to the form group (for example to show error state for the whole group).
  */
  classes?: string | null
}

export interface GovukFrontendCharacterCountCountMessage {
  /*
    Classes to add to the count message.
  */
  classes?: string | null
}

// The checkboxes component is described at https://design-system.service.gov.uk/components/checkboxes.
export interface GovukFrontendCheckboxes {
  /*
    One or more element IDs to add to the input `aria-describedby` attribute without a fieldset, used to provide additional descriptive information for screenreader users.
  */
  describedBy?: string | null

  /*
    Options for the fieldset component (for example legend).
  */
  fieldset?: GovukFrontendFieldset | null

  /*
    Options for the hint component (for example text).
  */
  hint?: GovukFrontendHint | null

  /*
    Options for the error message component. The error message component will not display if you use a falsy value for `errorMessage`, for example `false` or `null`.
  */
  errorMessage?: GovukFrontendErrorMessage | null

  /*
    Options for the form-group wrapper.
  */
  formGroup?: GovukFrontendCheckboxesFormGroup | null

  /*
    String to prefix id for each checkbox item if no id is specified on each item. If not passed, fall back to using the name option instead.
  */
  idPrefix?: string | null

  /*
    Name attribute for all checkbox items.
  */
  name: string

  /*
    Array of checkbox items objects.
  */
  items: GovukFrontendCheckboxesItem[]

  /*
    Array of values for checkboxes which should be checked when the page loads. Use this as an alternative to setting the `checked` option on each individual item.
  */
  values?: Array<string> | null

  /*
    Classes to add to the checkboxes container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the anchor tag.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendCheckboxesFormGroup {
  /*
    Classes to add to the form group (for example to show error state for the whole group).
  */
  classes?: string | null
}

export interface GovukFrontendCheckboxesItem {
  /*
    If `html` is set, this is not required. Text to use within each checkbox item label. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within each checkbox item label. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    Specific ID attribute for the checkbox item. If omitted, then component global `idPrefix` option will be applied.
  */
  id?: string | null

  /*
    Specific name for the checkbox item. If omitted, then component global `name` string will be applied.
  */
  name?: string | null

  /*
    Value for the checkbox input.
  */
  value: string

  /*
    Provide attributes and classes to each checkbox item label.
  */
  label?: GovukFrontendLabel | null

  /*
    Provide hint to each checkbox item.
  */
  hint?: GovukFrontendHint | null

  /*
    Divider text to separate checkbox items, for example the text 'or'.
  */
  divider?: string | null

  /*
    Whether the checkbox should be checked when the page loads. Takes precedence over the top-level `values` option.
  */
  checked?: boolean | null

  /*
    If set to `exclusive`, implements a 'None of these' type behaviour via JavaScript when checkboxes are clicked.
  */
  behaviour?: string | null

  /*
    If `true`, checkbox will be disabled.
  */
  disabled?: boolean | null

  /*
    HTML attributes (for example data attributes) to add to the checkbox input tag.
  */
  attributes?: Record<string, unknown> | null
}

// The cookie banner component is described at https://design-system.service.gov.uk/components/cookie-banner.
export interface GovukFrontendCookieBanner {
  /*
    The text for the `aria-label` which labels the cookie banner region. This region applies to all messages that the cookie banner includes. For example, the cookie message and the confirmation message. Defaults to 'Cookie banner'.
  */
  ariaLabel?: string | null

  /*
    Defaults to `false`. If you set this option to `true`, the whole cookie banner is hidden, including all messages within the banner. You can use `hidden` for client-side implementations where the cookie banner HTML is present, but hidden until the cookie banner is shown using JavaScript.
  */
  hidden?: boolean | null

  /*
    The additional classes that you want to add to the cookie banner.
  */
  classes?: string | null

  /*
    The additional attributes that you want to add to the cookie banner. For example, data attributes.
  */
  attributes?: Record<string, unknown> | null

  /*
    The different messages you can pass into the cookie banner. For example, the cookie message and the confirmation message.
  */
  messages: GovukFrontendCookieBannerMessage[]
}

export interface GovukFrontendCookieBannerMessage {
  /*
    The heading text that displays in the message. You can use any string with this option. If you set `headingHtml`, `headingText` is ignored.
  */
  headingText?: string | null

  /*
    The heading HTML to use within the message. You can use any string with this option. If you set `headingHtml`, `headingText` is ignored. If you are not passing HTML, use `headingText`.
  */
  headingHtml?: string | null

  /*
    The text for the main content within the message. You can use any string with this option. If you set `html`, `text` is not required and is ignored.
  */
  text?: string | null

  /*
    The HTML for the main content within the message. You can use any string with this option. If you set `html`, `text` is not required and is ignored. If you are not passing HTML, use `text`.
  */
  html?: string | null

  /*
    The buttons and links that you want to display in the message. `actions` defaults to `button` unless you set `href`, which renders the action as a link.
  */
  actions?: GovukFrontendCookieBannerMessageAction[] | null

  /*
    Defaults to `false`. If you set it to `true`, the message is hidden. You can use `hidden` for client-side implementations where the confirmation message HTML is present, but hidden on the page.
  */
  hidden?: boolean | null

  /*
    Set `role` to `alert` on confirmation messages to allow assistive tech to automatically read the message. You will also need to move focus to the confirmation message using JavaScript you have written yourself.
  */
  role?: string | null

  /*
    The additional classes that you want to add to the message.
  */
  classes?: string | null

  /*
    The additional attributes that you want to add to the message. For example, data attributes.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendCookieBannerMessageAction {
  /*
    The button or link text.
  */
  text?: string | null

  /*
    The type of button. You can set `button` or `submit`. Set `button` and `href` to render a link styled as a button. If you set `href`, it overrides `submit`.
  */
  type?: string | null

  /*
    The `href` for a link. Set `button` and `href` to render a link styled as a button.
  */
  href?: string | null

  /*
    The name attribute for the button. Does not apply if you set `href`, which makes a link.
  */
  name?: string | null

  /*
    The value attribute for the button. Does not apply if you set `href`, which makes a link.
  */
  value?: string | null

  /*
    The additional classes that you want to add to the button or link.
  */
  classes?: string | null

  /*
    The additional attributes that you want to add to the button or link. For example, data attributes.
  */
  attributes?: Record<string, unknown> | null
}

// The date input component is described at https://design-system.service.gov.uk/components/date-input.
export interface GovukFrontendDateInput {
  /*
    This is used for the main component and to compose the ID attribute for each item.
  */
  id: string

  /*
    Optional prefix. This is used to prefix each `item.name` using `-`.
  */
  namePrefix?: string | null

  /*
    An array of input objects with name, value and classes.
  */
  items?: GovukFrontendDateInputItem[] | null

  /*
    Options for the hint component.
  */
  hint?: GovukFrontendHint | null

  /*
    Options for the error message component. The error message component will not display if you use a falsy value for `errorMessage`, for example `false` or `null`.
  */
  errorMessage?: GovukFrontendErrorMessage | null

  /*
    Options for the form-group wrapper.
  */
  formGroup?: GovukFrontendDateInputFormGroup | null

  /*
    Options for the fieldset component (for example legend).
  */
  fieldset?: GovukFrontendFieldset | null

  /*
    Classes to add to the date-input container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the date-input container.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendDateInputItem {
  /*
    Item-specific ID. If provided, it will be used instead of the generated ID.
  */
  id?: string | null

  /*
    Item-specific name attribute.
  */
  name: string

  /*
    Item-specific label text. If provided, this will be used instead of `name` for item label text.
  */
  label?: string | null

  /*
    If provided, it will be used as the initial value of the input.
  */
  value?: string | null

  /*
    Attribute to [identify input purpose](https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose.html), for instance `bday-day`. See [autofill](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill) for full list of attributes that can be used.
  */
  autocomplete?: string | null

  /*
    Attribute to [provide a regular expression pattern](https://www.w3.org/TR/html51/sec-forms.html#the-pattern-attribute), used to match allowed character combinations for the input value.
  */
  pattern?: string | null

  /*
    Classes to add to date input item.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the date input tag.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendDateInputFormGroup {
  /*
    Classes to add to the form group (for example to show error state for the whole group).
  */
  classes?: string | null
}

// The details component is described at https://design-system.service.gov.uk/components/details.
export interface GovukFrontendDetails {
  /*
    If `summmaryHtml` is set, this is not required. Text to use within the summary element (the visible part of the details element). If `summaryHtml` is provided, the `summaryText` option will be ignored.
  */
  summaryText?: string | null

  /*
    If `summmaryText` is set, this is not required. HTML to use within the summary element (the visible part of the details element). If `summaryHtml` is provided, the `summaryText` option will be ignored.
  */
  summaryHtml?: string | null

  /*
    If `html` is set, this is not required. Text to use within the disclosed part of the details element. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the disclosed part of the details element. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    Not strictly a parameter but [Nunjucks code convention](https://mozilla.github.io/nunjucks/templating.html#call). Using a `call` block enables you to call a macro with all the text inside the tag. This is helpful if you want to pass a lot of content into a macro. To use it, you will need to wrap the entire details component in a `call` block.
  */
  caller?: unknown | null // nunjucks-block

  /*
    ID to add to the details element.
  */
  id?: string | null

  /*
    If `true`, details element will be expanded.
  */
  open?: boolean | null

  /*
    Classes to add to the `<details>` element.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the `<details>` element.
  */
  attributes?: Record<string, unknown> | null
}

// The error message component is described at https://design-system.service.gov.uk/components/error-message.
export interface GovukFrontendErrorMessage {
  /*
    If `html` is set, this is not required. Text to use within the error message. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the error message. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    ID attribute to add to the error message span tag.
  */
  id?: string | null

  /*
    Classes to add to the error message span tag.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the error message span tag.
  */
  attributes?: Record<string, unknown> | null

  /*
    A visually hidden prefix used before the error message. Defaults to 'Error'.
  */
  visuallyHiddenText?: string | null
}

// The error summary component is described at https://design-system.service.gov.uk/components/error-summary.
export interface GovukFrontendErrorSummary {
  /*
    If `titleHtml` is set, this is not required. Text to use for the heading of the error summary block. If `titleHtml` is provided, `titleText` will be ignored.
  */
  titleText?: string | null

  /*
    If `titleText` is set, this is not required. HTML to use for the heading of the error summary block. If `titleHtml` is provided, `titleText` will be ignored.
  */
  titleHtml?: string | null

  /*
    Text to use for the description of the errors. If you set `descriptionHtml`, the component will ignore `descriptionText`.
  */
  descriptionText?: string | null

  /*
    HTML to use for the description of the errors. If you set this option, the component will ignore `descriptionText`.
  */
  descriptionHtml?: string | null

  /*
    Not strictly a parameter but [Nunjucks code convention](https://mozilla.github.io/nunjucks/templating.html#call). Using a `call` block enables you to call a macro with all the text inside the tag. This is helpful if you want to pass a lot of content into a macro. To use it, you will need to wrap the entire error summary component in a `call` block.
  */
  caller?: unknown | null // nunjucks-block

  /*
    The list of errors to include in the summary
  */
  errorList: GovukFrontendErrorSummaryErrorListElement[]

  /*
    Prevent moving focus to the error summary when the page loads.
  */
  disableAutoFocus?: boolean | null

  /*
    Classes to add to the error-summary container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the error-summary container.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendErrorSummaryErrorListElement {
  /*
    Href attribute for the error link item. If provided item will be an anchor.
  */
  href?: string | null

  /*
    If `html` is set, this is not required. Text for the error link item. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML for the error link item. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    HTML attributes (for example data attributes) to add to the error link anchor.
  */
  attributes?: Record<string, unknown> | null
}

// The exit this-page component is described at https://design-system.service.gov.uk/components/exit-this-page.
export interface GovukFrontendExitThisPage {
  /*
    Text for the link. If `html` is provided, the `text` option will be ignored. Defaults to 'Exit this page'.
  */
  text?: string | null

  /*
    HTML for the link. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    URL to redirect the current tab to. Defaults to `https://www.bbc.co.uk/weather`.
  */
  redirectUrl?: string | null

  /*
    ID attribute to add to the exit this page container.
  */
  id?: string | null

  /*
    Classes to add to the exit this page container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the exit this page container.
  */
  attributes?: Record<string, unknown> | null

  /*
    Text announced by screen readers when Exit this Page has been activated via the keyboard shortcut. Defaults to 'Exiting page.'
  */
  activatedText?: string | null

  /*
    Text announced by screen readers when the keyboard shortcut has timed out without successful activation. Defaults to 'Exit this page expired.'
  */
  timedOutText?: string | null

  /*
    Text announced by screen readers when the user must press <kbd>Shift</kbd> two more times to activate the button. Defaults to 'Shift, press 2 more times to exit.'
  */
  pressTwoMoreTimesText?: string | null

  /*
    Text announced by screen readers when the user must press <kbd>Shift</kbd> one more time to activate the button. Defaults to 'Shift, press 1 more time to exit.'
  */
  pressOneMoreTimeText?: string | null
}

// The fieldset component is described at https://design-system.service.gov.uk/components/fieldset.
export interface GovukFrontendFieldset {
  /*
    One or more element IDs to add to the `aria-describedby` attribute, used to provide additional descriptive information for screenreader users.
  */
  describedBy?: string | null

  /*
    Options for the legend
  */
  legend?: GovukFrontendFieldsetLegend | null

  /*
    Classes to add to the fieldset container.
  */
  classes?: string | null

  /*
    Optional ARIA role attribute.
  */
  role?: string | null

  /*
    HTML attributes (for example data attributes) to add to the fieldset container.
  */
  attributes?: Record<string, unknown> | null

  /*
    HTML to use/render within the fieldset element.
  */
  html?: string | null

  /*
    Not strictly a parameter but [Nunjucks code convention](https://mozilla.github.io/nunjucks/templating.html#call). Using a `call` block enables you to call a macro with all the text inside the tag. This is helpful if you want to pass a lot of content into a macro. To use it, you will need to wrap the entire fieldset component in a `call` block.
  */
  caller?: unknown | null // nunjucks-block
}

export interface GovukFrontendFieldsetLegend {
  /*
    If `html` is set, this is not required. Text to use within the legend. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the legend. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    Classes to add to the legend.
  */
  classes?: string | null

  /*
    Whether the legend also acts as the heading for the page.
  */
  isPageHeading?: boolean | null
}

// The file upload component is described at https://design-system.service.gov.uk/components/file-upload.
export interface GovukFrontendFileUpload {
  /*
    The name of the input, which is submitted with the form data.
  */
  name: string

  /*
    The ID of the input.
  */
  id: string

  /*
    Optional initial value of the input.
  */
  value?: string | null

  /*
    If `true`, file input will be disabled.
  */
  disabled?: boolean | null

  /*
    One or more element IDs to add to the `aria-describedby` attribute, used to provide additional descriptive information for screenreader users.
  */
  describedBy?: string | null

  /*
    Options for the label component.
  */
  label: GovukFrontendLabel

  /*
    Options for the hint component.
  */
  hint?: GovukFrontendHint | null

  /*
    Options for the error message component. The error message component will not display if you use a falsy value for `errorMessage`, for example `false` or `null`.
  */
  errorMessage?: GovukFrontendErrorMessage | null

  /*
    Options for the form-group wrapper.
  */
  formGroup?: GovukFrontendFileUploadFormGroup | null

  /*
    Classes to add to the file upload component.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the file upload component.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendFileUploadFormGroup {
  /*
    Classes to add to the form group (for example to show error state for the whole group).
  */
  classes?: string | null
}

// The footer component is described at https://design-system.service.gov.uk/components/footer.
export interface GovukFrontendFooter {
  /*
    Object containing options for the meta navigation.
  */
  meta?: GovukFrontendFooterMeta | null

  /*
    Array of items for use in the navigation section of the footer.
  */
  navigation?: GovukFrontendFooterNavigationElement[] | null

  /*
    The content licence information. Defaults to Open Government Licence (OGL) v3 licence.
  */
  contentLicence?: GovukFrontendFooterContentLicence | null

  /*
    The copyright information, this defaults to Crown Copyright.
  */
  copyright?: GovukFrontendFooterCopyright | null

  /*
    Classes that can be added to the inner container, useful if you want to make the footer full width.
  */
  containerClasses?: string | null

  /*
    Classes to add to the footer component container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the footer component container.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendFooterMeta {
  /*
    Title for a meta item section. Defaults to 'Support links'.
  */
  visuallyHiddenTitle?: string | null

  /*
    HTML to add to the meta section of the footer, which will appear below any links specified using meta.items.
  */
  html?: string | null

  /*
    Text to add to the meta section of the footer, which will appear below any links specified using meta.items. If meta.html is specified, this option is ignored.
  */
  text?: string | null

  /*
    Array of items for use in the meta section of the footer.
  */
  items?: GovukFrontendFooterMetaItem[] | null
}

export interface GovukFrontendFooterMetaItem {
  /*
    List item text in the meta section of the footer.
  */
  text?: string | null

  /*
    List item href attribute in the meta section of the footer.
  */
  href: string

  /*
    HTML attributes (for example data attributes) to add to the anchor in the footer meta section.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendFooterNavigationElement {
  /*
    Title for a section.
  */
  title: string

  /*
    Amount of columns to display items in navigation section of the footer.
  */
  columns?: number | null // integer

  /*
    Width of each navigation section in the footer. Defaults to full width. You can pass any design system grid width here, for example, 'one-third'; 'two-thirds'; 'one-half'.
  */
  width?: string | null

  /*
    Array of items to display in the list in navigation section of the footer.
  */
  items?: GovukFrontendFooterNavigationElementItem[] | null
}

export interface GovukFrontendFooterNavigationElementItem {
  /*
    List item text in the navigation section of the footer.
  */
  text?: string | null

  /*
    List item href attribute in the navigation section of the footer. Both `text` and `href` attributes need to be present to create a link.
  */
  href: string

  /*
    HTML attributes (for example data attributes) to add to the anchor in the footer navigation section.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendFooterContentLicence {
  /*
    If `html` is set, this is not required. If `html` is provided, the `text` option will be ignored. If neither are provided, the text for the Open Government Licence is used.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. If `html` is provided, the `text` option will be ignored. If neither are provided, the text for the Open Government Licence is used. The content licence is inside a `<span>` element, so you can only add [phrasing content](https://html.spec.whatwg.org/#phrasing-content) to it.
  */
  html?: string | null
}

export interface GovukFrontendFooterCopyright {
  /*
    If `html` is set, this is not required. If `html` is provided, the `text` option will be ignored. If neither are provided, Crown copyright is used.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. If `html` is provided, the `text` option will be ignored. If neither are provided, Crown copyright is used. The copyright notice is inside an `<a>` element, so you can only use text formatting elements within it.
  */
  html?: string | null
}

// The header component is described at https://design-system.service.gov.uk/components/header.
export interface GovukFrontendHeader {
  /*
    The URL of the homepage. Defaults to `/`
  */
  homepageUrl?: string | null

  /*
    The public path for the assets folder. If not provided it defaults to /assets/images
  */
  assetsPath?: string | null

  /*
    Product name, used when the product name follows on directly from â€˜GOV.UKâ€™. For example, GOV.UK Pay or GOV.UK Design System. In most circumstances, you should use `serviceName`.
  */
  productName?: string | null

  /*
    The name of your service, included in the header.
  */
  serviceName?: string | null

  /*
    URL for the service name anchor.
  */
  serviceUrl?: string | null

  /*
    An array of navigation item objects.
  */
  navigation?: GovukFrontendHeaderNavigationElement[] | null

  /*
    Classes for the navigation section of the header.
  */
  navigationClasses?: string | null

  /*
    Text for the `aria-label` attribute of the navigation. Defaults to the same value as `menuButtonText`.
  */
  navigationLabel?: string | null

  /*
    Text for the `aria-label` attribute of the button that opens the mobile navigation, if there is a mobile navigation menu. Defaults to 'Show or hide menu'.
  */
  menuButtonLabel?: string | null

  /*
    Text of the button that opens the mobile navigation menu, if there is a mobile navigation menu. There is no enforced character limit, but there is a limited display space so keep text as short as possible. By default, this is set to 'Menu'.
  */
  menuButtonText?: string | null

  /*
    Classes for the container, useful if you want to make the header fixed width.
  */
  containerClasses?: string | null

  /*
    Classes to add to the header container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the header container.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendHeaderNavigationElement {
  /*
    Text for the navigation item. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    HTML for the navigation item. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    URL of the navigation item anchor.
  */
  href?: string | null

  /*
    Flag to mark the navigation item as active or not.
  */
  active?: boolean | null

  /*
    HTML attributes (for example data attributes) to add to the navigation item anchor.
  */
  attributes?: Record<string, unknown> | null
}

// The hint component is described at https://design-system.service.gov.uk/components/hint.
export interface GovukFrontendHint {
  /*
    If `html` is set, this is not required. Text to use within the hint. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the hint. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    Optional ID attribute to add to the hint span tag.
  */
  id?: string | null

  /*
    Classes to add to the hint span tag.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the hint span tag.
  */
  attributes?: Record<string, unknown> | null
}

// The input component is described at https://design-system.service.gov.uk/components/input.
export interface GovukFrontendInput {
  /*
    The ID of the input.
  */
  id: string

  /*
    The name of the input, which is submitted with the form data.
  */
  name: string

  /*
    Type of input control to render, for example, a password input control. Defaults to `text`.
  */
  type?: string | null

  /*
    Optional value for [inputmode](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).
  */
  inputmode?: string | null

  /*
    Optional initial value of the input.
  */
  value?: string | null

  /*
    If `true`, input will be disabled.
  */
  disabled?: boolean | null

  /*
    One or more element IDs to add to the `aria-describedby` attribute, used to provide additional descriptive information for screenreader users.
  */
  describedBy?: string | null

  /*
    Options for the label component.
  */
  label: GovukFrontendLabel

  /*
    Options for the hint component.
  */
  hint?: GovukFrontendHint | null

  /*
    Options for the error message component. The error message component will not display if you use a falsy value for `errorMessage`, for example `false` or `null`.
  */
  errorMessage?: GovukFrontendErrorMessage | null

  /*
    Options for the prefix element.
  */
  prefix?: GovukFrontendInputPrefix | null

  /*
    Options for the suffix element.
  */
  suffix?: GovukFrontendInputSuffix | null

  /*
    Options for the form-group wrapper.
  */
  formGroup?: GovukFrontendInputFormGroup | null

  /*
    Classes to add to the input.
  */
  classes?: string | null

  /*
    Attribute to [identify input purpose](https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose.html), for instance "postal-code" or "username". See [autofill](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill) for full list of attributes that can be used.
  */
  autocomplete?: string | null

  /*
    Attribute to [provide a regular expression pattern](https://www.w3.org/TR/html51/sec-forms.html#the-pattern-attribute), used to match allowed character combinations for the input value.
  */
  pattern?: string | null

  /*
    Optional field to enable or disable the `spellcheck` attribute on the input.
  */
  spellcheck?: boolean | null

  /*
    HTML attributes (for example data attributes) to add to the input.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendInputPrefix {
  /*
    Required. If `html` is set, this is not required. Text to use within the label. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    Required. If `text` is set, this is not required. HTML to use within the label. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    Classes to add to the prefix.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the prefix element.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendInputSuffix {
  /*
    If `html` is set, this is not required. Text to use within the label. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the label. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    Classes to add to the suffix element.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the suffix element.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendInputFormGroup {
  /*
    Classes to add to the form group (for example to show error state for the whole group).
  */
  classes?: string | null
}

// The inset text component is described at https://design-system.service.gov.uk/components/inset-text.
export interface GovukFrontendInsetText {
  /*
    If `html` is set, this is not required. Text to use within the back link component. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the back link component. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    Not strictly a parameter but [Nunjucks code convention](https://mozilla.github.io/nunjucks/templating.html#call). Using a `call` block enables you to call a macro with all the text inside the tag. This is helpful if you want to pass a lot of content into a macro. To use it, you will need to wrap the entire inset text component in a `call` block.
  */
  caller?: unknown | null // nunjucks-block

  /*
    ID attribute to add to the inset text container.
  */
  id?: string | null

  /*
    Classes to add to the inset text container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the inset text container.
  */
  attributes?: Record<string, unknown> | null
}

// The label component is described at https://design-system.service.gov.uk/components/label.
export interface GovukFrontendLabel {
  /*
    If `html` is set, this is not required. Text to use within the label. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the label. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    The value of the `for` attribute, the ID of the input the label is associated with.
  */
  for?: string | null

  /*
    Whether the label also acts as the heading for the page.
  */
  isPageHeading?: boolean | null

  /*
    Classes to add to the label tag.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the label tag.
  */
  attributes?: Record<string, unknown> | null
}

// The notification banner component is described at https://design-system.service.gov.uk/components/notification-banner.
export interface GovukFrontendNotificationBanner {
  /*
    The text that displays in the notification banner. You can use any string with this option. If you set `html`, this option is not required and is ignored.
  */
  text?: string | null

  /*
    The HTML to use within the notification banner. You can use any string with this option. If you set `html`, `text` is not required and is ignored.
  */
  html?: string | null

  /*
    Not strictly a parameter but [Nunjucks code convention](https://mozilla.github.io/nunjucks/templating.html#call). Using a `call` block enables you to call a macro with all the text inside the tag. This is helpful if you want to pass a lot of content into a macro. To use it, you will need to wrap the entire notification banner component in a `call` block.
  */
  caller?: unknown | null // nunjucks-block

  /*
    The title text that displays in the notification banner. You can use any string with this option. Use this option to set text that does not contain HTML. The available default values are 'Important', 'Success', and null:
    - if you do not set `type`, `titleText` defaults to 'Important'
    - if you set `type` to `success`, `titleText` defaults to 'Success'
    - if you set `titleHtml`, this option is ignored
    
  */
  titleText?: string | null

  /*
    The title HTML to use within the notification banner. You can use any string with this option. Use this option to set text that contains HTML. If you set `titleHtml`, the `titleText` option is ignored.
  */
  titleHtml?: string | null

  /*
    Sets heading level for the title only. You can only use values between `1` and `6` with this option. The default is `2`.
  */
  titleHeadingLevel?: string | null

  /*
    The type of notification to render. You can use only the `success` or null values with this option. If you set `type` to `success`, the notification banner sets `role` to `alert`. JavaScript then moves the keyboard focus to the notification banner when the page loads. If you do not set `type`, the notification banner sets `role` to `region`.
  */
  type?: string | null

  /*
    Overrides the value of the `role` attribute for the notification banner. Defaults to `region`. If you set `type` to `success`, `role` defaults to `alert`.
  */
  role?: string | null

  /*
    The `id` for the banner title, and the `aria-labelledby` attribute in the banner. Defaults to `govuk-notification-banner-title`.
  */
  titleId?: string | null

  /*
    If you set `type` to `success`, or `role` to `alert`, JavaScript moves the keyboard focus to the notification banner when the page loads. To disable this behaviour, set `disableAutoFocus` to `true`.
  */
  disableAutoFocus?: boolean | null

  /*
    The classes that you want to add to the notification banner.
  */
  classes?: string | null

  /*
    The HTML attributes that you want to add to the notification banner, for example, data attributes.
  */
  attributes?: Record<string, unknown> | null
}

// The pagination component is described at https://design-system.service.gov.uk/components/pagination.
export interface GovukFrontendPagination {
  /*
    The array of link objects.
  */
  items?: GovukFrontendPaginationItem[] | null

  /*
    A link to the previous page, if there is a previous page.
  */
  previous?: GovukFrontendPaginationPrevious | null

  /*
    A link to the next page, if there is a next page.
  */
  next?: GovukFrontendPaginationNext | null

  /*
    The label for the navigation landmark that wraps the pagination. Defaults to 'results'.
  */
  landmarkLabel?: string | null

  /*
    The classes you want to add to the pagination `nav` parent.
  */
  classes?: string | null

  /*
    The HTML attributes (for example, data attributes) you want to add to the pagination `nav` parent.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendPaginationItem {
  /*
    The pagination item text - usually a page number.
  */
  number?: string | null

  /*
    The visually hidden label (for the pagination item) which will be applied to an `aria-label` and announced by screen readers on the pagination item link. Should include page number.
  */
  visuallyHiddenText?: string | null

  /*
    The link's URL.
  */
  href: string

  /*
    Set to `true` to indicate the current page the user is on.
  */
  current?: boolean | null

  /*
    Use this option if you want to specify an ellipsis at a given point between numbers. If you set this option as `true`, any other options for the item are ignored.
  */
  ellipsis?: boolean | null

  /*
    The HTML attributes (for example, data attributes) you want to add to the anchor.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendPaginationPrevious {
  /*
    The link text to the previous page. Defaults to 'Previous page', where 'page' is visually hidden.
  */
  text?: string | null

  /*
    The optional label that goes underneath the link to the previous page, providing further context for the user about where the link goes.
  */
  labelText?: string | null

  /*
    The previous page's URL.
  */
  href: string

  /*
    The HTML attributes (for example, data attributes) you want to add to the anchor.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendPaginationNext {
  /*
    The link text to the next page. Defaults to 'Next page', where 'page' is visually hidden.
  */
  text?: string | null

  /*
    The optional label that goes underneath the link to the next page, providing further context for the user about where the link goes.
  */
  labelText?: string | null

  /*
    The next page's URL.
  */
  href: string

  /*
    The HTML attributes (for example, data attributes) you want to add to the anchor.
  */
  attributes?: Record<string, unknown> | null
}

// The panel component is described at https://design-system.service.gov.uk/components/panel.
export interface GovukFrontendPanel {
  /*
    If `titleHtml` is set, this is not required. Text to use within the panel. If `titleHtml` is provided, the `titleText` option will be ignored.
  */
  titleText?: string | null

  /*
    If `titleText` is set, this is not required. HTML to use within the panel. If `titleHtml` is provided, the `titleText` option will be ignored.
  */
  titleHtml?: string | null

  /*
    Heading level, from `1` to `6`. Default is `1`.
  */
  headingLevel?: number | null // integer

  /*
    If `html` is set, this is not required. Text to use within the panel content. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the panel content. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    Not strictly a parameter but [Nunjucks code convention](https://mozilla.github.io/nunjucks/templating.html#call). Using a `call` block enables you to call a macro with all the text inside the tag. This is helpful if you want to pass a lot of content into a macro. To use it, you will need to wrap the entire panel component in a `call` block.
  */
  caller?: unknown | null // nunjucks-block

  /*
    Classes to add to the panel container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the panel container.
  */
  attributes?: Record<string, unknown> | null
}

// The phase banner component is described at https://design-system.service.gov.uk/components/phase-banner.
export interface GovukFrontendPhaseBanner {
  /*
    If `html` is set, this is not required. Text to use within the phase banner. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the phase banner. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    Options for the tag component.
  */
  tag: GovukFrontendTag

  /*
    Classes to add to the phase banner container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the phase banner container.
  */
  attributes?: Record<string, unknown> | null
}

// The radios component is described at https://design-system.service.gov.uk/components/radios.
export interface GovukFrontendRadios {
  /*
    Options for the fieldset component (for example legend).
  */
  fieldset?: GovukFrontendFieldset | null

  /*
    Options for the hint component (for example text).
  */
  hint?: GovukFrontendHint | null

  /*
    Options for the error message component. The error message component will not display if you use a falsy value for `errorMessage`, for example `false` or `null`.
  */
  errorMessage?: GovukFrontendErrorMessage | null

  /*
    Options for the form-group wrapper.
  */
  formGroup?: GovukFrontendRadiosFormGroup | null

  /*
    String to prefix ID for each radio item if no ID is specified on each item. If `idPrefix` is not passed, fallback to using the `name` attribute instead.
  */
  idPrefix?: string | null

  /*
    Name attribute for each radio item.
  */
  name: string

  /*
    Array of radio items objects.
  */
  items: GovukFrontendRadiosItem[]

  /*
    The value for the radio which should be checked when the page loads. Use this as an alternative to setting the `checked` option on each individual item.
  */
  value?: string | null

  /*
    Classes to add to the radio container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the radio input tag.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendRadiosFormGroup {
  /*
    Classes to add to the form group (for example to show error state for the whole group).
  */
  classes?: string | null
}

export interface GovukFrontendRadiosItem {
  /*
    If `html` is set, this is not required. Text to use within each radio item label. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within each radio item label. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    Specific ID attribute for the radio item. If omitted, then `idPrefix` string will be applied.
  */
  id?: string | null

  /*
    Value for the radio input.
  */
  value: string

  /*
    Provide attributes and classes to each radio item label.
  */
  label?: GovukFrontendLabel | null

  /*
    Provide hint to each radio item.
  */
  hint?: GovukFrontendHint | null

  /*
    Divider text to separate radio items, for example the text 'or'.
  */
  divider?: string | null

  /*
    Whether the radio should be checked when the page loads. Takes precedence over the top-level `value` option.
  */
  checked?: boolean | null

  /*
    If `true`, radio will be disabled.
  */
  disabled?: boolean | null

  /*
    HTML attributes (for example data attributes) to add to the radio input tag.
  */
  attributes?: Record<string, unknown> | null
}

// The select component is described at https://design-system.service.gov.uk/components/select.
export interface GovukFrontendSelect {
  /*
    ID for each select box.
  */
  id: string

  /*
    Name property for the select.
  */
  name: string

  /*
    Array of option items for the select.
  */
  items: GovukFrontendSelectItem[]

  /*
    Value for the option which should be selected. Use this as an alternative to setting the `selected` option on each individual item.
  */
  value?: string | null

  /*
    If `true`, select box will be disabled. Use the `disabled` option on each individual item to only disable certain options.
  */
  disabled?: boolean | null

  /*
    One or more element IDs to add to the `aria-describedby` attribute, used to provide additional descriptive information for screenreader users.
  */
  describedBy?: string | null

  /*
    Label text or HTML by specifying value for either text or html keys.
  */
  label?: GovukFrontendLabel | null

  /*
    Options for the hint component.
  */
  hint?: GovukFrontendHint | null

  /*
    Options for the error message component. The error message component will not display if you use a falsy value for `errorMessage`, for example `false` or `null`.
  */
  errorMessage?: GovukFrontendErrorMessage | null

  /*
    Options for the form-group wrapper.
  */
  formGroup?: GovukFrontendSelectFormGroup | null

  /*
    Classes to add to the select.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the select.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendSelectItem {
  /*
    Value for the option item. Defaults to an empty string.
  */
  value?: string | null

  /*
    Text for the option item.
  */
  text?: string | null

  /*
    Whether the option should be selected when the page loads. Takes precedence over the top-level `value` option.
  */
  selected?: boolean | null

  /*
    Sets the option item as disabled.
  */
  disabled?: boolean | null

  /*
    HTML attributes (for example data attributes) to add to the option.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendSelectFormGroup {
  /*
    Classes to add to the form group (for example to show error state for the whole group).
  */
  classes?: string | null
}

// The skip link component is described at https://design-system.service.gov.uk/components/skip-link.
export interface GovukFrontendSkipLink {
  /*
    If `html` is set, this is not required. Text to use within the skip link component. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the skip link component. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    The value of the skip linkâ€™s `href` attribute. Defaults to `#content` if you do not provide a value.
  */
  href?: string | null

  /*
    Classes to add to the skip link.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the skip link.
  */
  attributes?: Record<string, unknown> | null
}

// The summary list component is described at https://design-system.service.gov.uk/components/summary-list.
export interface GovukFrontendSummaryList {
  /*
    Array of row item objects.
  */
  rows: GovukFrontendSummaryListRow[]

  /*
    Options for the summary card. If any of these options are present, a summary card will wrap around the summary list.
  */
  card?: GovukFrontendSummaryListCard | null

  /*
    Classes to add to the container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the container.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendSummaryListRow {
  /*
    Classes to add to the row `div`.
  */
  classes?: string | null

  key?: GovukFrontendSummaryListRowKey | null

  value?: GovukFrontendSummaryListRowValue | null

  actions?: GovukFrontendSummaryListRowActions | null
}

export interface GovukFrontendSummaryListRowKey {
  /*
    If `html` is set, this is not required. Text to use within the each key. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  html?: string | null

  /*
    Classes to add to the key wrapper.
  */
  classes?: string | null
}

export interface GovukFrontendSummaryListRowValue {
  /*
    If `html` is set, this is not required. Text to use within the each value. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the each value. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    Classes to add to the value wrapper.
  */
  classes?: string | null
}

export interface GovukFrontendSummaryListRowActions {
  /*
    Classes to add to the actions wrapper.
  */
  classes?: string | null

  /*
    Array of action item objects.
  */
  items?: GovukFrontendSummaryListRowActionsItem[] | null
}

export interface GovukFrontendSummaryListRowActionsItem {
  /*
    The value of the link's `href` attribute for an action item.
  */
  href: string

  /*
    If `html` is set, this is not required. Text to use within each action item. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the each action item. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    Actions rely on context from the surrounding content so may require additional accessible text. Text supplied to this option is appended to the end. Use `html` for more complicated scenarios.
  */
  visuallyHiddenText?: string | null

  /*
    Classes to add to the action item.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the action item.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendSummaryListCard {
  /*
    Data for the summary card header.
  */
  title?: GovukFrontendSummaryListCardTitle | null

  /*
    Data for the summary card actions
  */
  actions?: GovukFrontendSummaryListCardActions | null

  /*
    Classes to add to the container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the container.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendSummaryListCardTitle {
  /*
    Text to use within the each title. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    Text to use within the each title. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    Heading level, from `1` to `6`. Default is `2`.
  */
  headingLevel?: number | null // integer

  /*
    Classes to add to the title wrapper.
  */
  classes?: string | null
}

export interface GovukFrontendSummaryListCardActions {
  /*
    Array of action item objects.
  */
  items?: GovukFrontendSummaryListCardActionsItem[] | null

  /*
    Classes to add to the actions wrapper.
  */
  classes?: string | null
}

export interface GovukFrontendSummaryListCardActionsItem {
  /*
    The value of the link's `href` attribute for an action item.
  */
  href: string

  /*
    If `html` is set, this is not required. Text to use within each action item. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the each action item. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    Actions rely on context from the surrounding content so may require additional accessible text. Text supplied to this option is appended to the end. Use `html` for more complicated scenarios.
  */
  visuallyHiddenText?: string | null

  /*
    Classes to add to the action item.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the action item.
  */
  attributes?: Record<string, unknown> | null
}

// The table component is described at https://design-system.service.gov.uk/components/table.
export interface GovukFrontendTable {
  /*
    Array of table rows and cells.
  */
  rows: GovukFrontendTableRow[]

  /*
    Array of table head cells.
  */
  head?: GovukFrontendTableHeadElement[] | null

  /*
    Caption text
  */
  caption?: string | null

  /*
    Classes for caption text size. Classes should correspond to the available typography heading classes.
  */
  captionClasses?: string | null

  /*
    If set to true, first cell in table row will be a TH instead of a TD.
  */
  firstCellIsHeader?: boolean | null

  /*
    Classes to add to the table container.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the table container.
  */
  attributes?: Record<string, unknown> | null
}

type GovukFrontendTableRow = GovukFrontendTableCell[]

export interface GovukFrontendTableCell {
  /*
    If `html` is set, this is not required. Text for cells in table rows. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML for cells in table rows. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    Specify format of a cell. Currently we only use "numeric".
  */
  format?: string | null

  /*
    Classes to add to the table row cell.
  */
  classes?: string | null

  /*
    Specify how many columns a cell extends.
  */
  colspan?: number | null // integer

  /*
    Specify how many rows a cell extends.
  */
  rowspan?: number | null // integer

  /*
    HTML attributes (for example data attributes) to add to the table cell.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendTableHeadElement {
  /*
    If `html` is set, this is not required. Text for table head cells. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML for table head cells. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    Specify format of a cell. Currently we only use "numeric".
  */
  format?: string | null

  /*
    Classes to add to the table head cell.
  */
  classes?: string | null

  /*
    Specify how many columns a cell extends.
  */
  colspan?: number | null // integer

  /*
    Specify how many rows a cell extends.
  */
  rowspan?: number | null // integer

  /*
    HTML attributes (for example data attributes) to add to the table cell.
  */
  attributes?: Record<string, unknown> | null
}

// The tabs component is described at https://design-system.service.gov.uk/components/tabs.
export interface GovukFrontendTabs {
  /*
    This is used for the main component and to compose the ID attribute for each item.
  */
  id?: string | null

  /*
    String to prefix id for each tab item if no id is specified on each item.
  */
  idPrefix?: string | null

  /*
    Title for the tabs table of contents.
  */
  title?: string | null

  /*
    Array of tab items.
  */
  items: GovukFrontendTabsItem[]

  /*
    Classes to add to the tabs component.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the tabs component.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendTabsItem {
  /*
    Specific ID attribute for the tab item. If omitted, then `idPrefix` string is required instead.
  */
  id: string

  /*
    The text label of a tab item.
  */
  label: string

  /*
    HTML attributes (for example data attributes) to add to the tab.
  */
  attributes?: Record<string, unknown> | null

  /*
    Content for the panel
  */
  panel: GovukFrontendTabsItemPanel
}

export interface GovukFrontendTabsItemPanel {
  /*
    If `html` is set, this is not required. Text to use within each tab panel. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the each tab panel. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    HTML attributes (for example data attributes) to add to the tab panel.
  */
  attributes?: Record<string, unknown> | null
}

// The tag component is described at https://design-system.service.gov.uk/components/tag.
export interface GovukFrontendTag {
  /*
    If `html` is set, this is not required. Text to use within the tag component. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the tag component. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    Classes to add to the tag.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the tag.
  */
  attributes?: Record<string, unknown> | null
}

// The textarea component is described at https://design-system.service.gov.uk/components/textarea.
export interface GovukFrontendTextarea {
  /*
    The ID of the textarea.
  */
  id: string

  /*
    The name of the textarea, which is submitted with the form data.
  */
  name: string

  /*
    Optional field to enable or disable the `spellcheck` attribute on the textarea.
  */
  spellcheck?: boolean | null

  /*
    Optional number of textarea rows (default is 5 rows).
  */
  rows?: string | null

  /*
    Optional initial value of the textarea.
  */
  value?: string | null

  /*
    If `true`, textarea will be disabled.
  */
  disabled?: boolean | null

  /*
    One or more element IDs to add to the `aria-describedby` attribute, used to provide additional descriptive information for screenreader users.
  */
  describedBy?: string | null

  /*
    Options for the label component.
  */
  label: GovukFrontendLabel

  /*
    Options for the hint component.
  */
  hint?: GovukFrontendHint | null

  /*
    Options for the error message component. The error message component will not display if you use a falsy value for `errorMessage`, for example `false` or `null`.
  */
  errorMessage?: GovukFrontendErrorMessage | null

  /*
    Options for the form-group wrapper.
  */
  formGroup?: GovukFrontendTextareaFormGroup | null

  /*
    Classes to add to the textarea.
  */
  classes?: string | null

  /*
    Attribute to [identify input purpose](https://www.w3.org/WAI/WCAG21/Understanding/identify-input-purpose.html), for example `postal-code` or `username`. See [autofill](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill) for full list of attributes that can be used.
  */
  autocomplete?: string | null

  /*
    HTML attributes (for example data attributes) to add to the textarea.
  */
  attributes?: Record<string, unknown> | null
}

export interface GovukFrontendTextareaFormGroup {
  /*
    Classes to add to the form group (for example to show error state for the whole group).
  */
  classes?: string | null
}

// The warning text component is described at https://design-system.service.gov.uk/components/warning-text.
export interface GovukFrontendWarningText {
  /*
    If `html` is set, this is not required. Text to use within the warning text component. If `html` is provided, the `text` option will be ignored.
  */
  text?: string | null

  /*
    If `text` is set, this is not required. HTML to use within the warning text component. If `html` is provided, the `text` option will be ignored.
  */
  html?: string | null

  /*
    The fallback text for the icon. Defaults to 'Warning'
  */
  iconFallbackText?: string | null

  /*
    Classes to add to the warning text.
  */
  classes?: string | null

  /*
    HTML attributes (for example data attributes) to add to the warning text.
  */
  attributes?: Record<string, unknown> | null
}
