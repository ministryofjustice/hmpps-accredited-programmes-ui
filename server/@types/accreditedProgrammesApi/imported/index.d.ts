/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/courses": {
    /** List all courses */
    get: operations["getAllCourses"];
  };
  "/courses/csv": {
    /** List all courses */
    get: operations["getCoursesCsv"];
    /** Upload a CSV format file containing a full set of Courses data. */
    put: operations["updateCourses"];
  };
  "/courses/course-names": {
    /** Get all unique course names */
    get: operations["getAllCourseNames"];
  };
  "/courses/prerequisites/csv": {
    /** Download a CSV format representation of the current set of prerequisites. */
    get: operations["getPrerequisitesCsv"];
    /**
     * Upload a CSV format file containing a full set of prerequisites data for the current set of courses.
     * @description Accepts a CSV format file of data representing the desired state of all prerequisite data attached to the current set of courses. <p>Pre-existing prerequisite data will be removed before the new data is applied. <p>The first row of CSV data is treated as a header row.  The column headings in the header row must much the names of the fields in the PrerequisiteRecord schema. Column order is not important.
     */
    put: operations["updatePrerequisites"];
  };
  "/courses/{id}": {
    /** Details for a single course */
    get: operations["getCourseById"];
  };
  "/courses/{id}/offerings": {
    /** List all offerings for a course */
    get: operations["getAllOfferingsByCourseId"];
  };
  "/organisations/{organisationId}/courses": {
    /** List all courses for an organisationId */
    get: operations["getAllCoursesByOrganisationId"];
  };
  "/offerings/csv": {
    /** Download all Offerings in CSV format */
    get: operations["getOfferingsCsv"];
    /**
     * Upload all offerings in CSV format.
     * @description Accepts a CSV format file of data representing the desired state of all offerings data attached to the current set of courses. <p>Pre-existing offering data will be removed before the new data is applied. <p>The first row of CSV data is treated as a header row.  The column headings in the header row must much the names of the fields in the OfferingRecord schema. Column order is not important.
     */
    put: operations["updateOfferings"];
  };
  "/offerings/{id}": {
    /** Details for a single course offering */
    get: operations["getOfferingById"];
  };
  "/referrals": {
    /** Retrieve some referrals */
    get: operations["getReferrals"];
    /** Start a referral */
    post: operations["createReferral"];
  };
  "/referrals/{id}": {
    /** Retrieve a referral */
    get: operations["getReferralById"];
    /** Update a referral */
    put: operations["updateReferralById"];
  };
  "/referrals/{id}/status": {
    /** Change a referral's status */
    put: operations["updateReferralStatusById"];
  };
  "/referrals/{id}/submit": {
    /** Submit a completed referral */
    post: operations["submitReferralById"];
  };
  "/referrals/organisation/{organisationId}/dashboard": {
    /** Get paginated referrals by organisationId */
    get: operations["getReferralSummariesByOrganisationId"];
  };
  "/referrals/me/dashboard": {
    /** Get paginated referrals by logged in user */
    get: operations["getReferralSummariesByUsername"];
  };
  "/offerings/{id}/course": {
    /** Retrieve the course that owns an offering. */
    get: operations["getCourseByOfferingId"];
  };
  "/course-participations": {
    /** Record information about a person's prior participation in a course. */
    post: operations["createCourseParticipation"];
  };
  "/course-participations/{id}": {
    /** Return information about a person's participation in a course. Selected by a unique identifier. */
    get: operations["getCourseParticipationById"];
    /** Update the information about a person's participation in a course. */
    put: operations["updateCourseParticipationById"];
    /** Delete information about a person's participation in a course. */
    delete: operations["deleteCourseParticipationById"];
  };
  "/people/{prisonNumber}/course-participations": {
    /** Retrieve course participation information for a person identified by their prison number. */
    get: operations["getCourseParticipationsByPrisonNumber"];
  };
  "/oasys/{prisonNumber}/offence-details": {
    /** Offence details as held by Oasys */
    get: operations["getOffenceDetails"];
  };
  "/oasys/{prisonNumber}/relationships": {
    /** Relationships details as held by Oasys */
    get: operations["getRelationships"];
  };
  "/oasys/{prisonNumber}/rosh-analysis": {
    /** ROSH analysis details as held by Oasys */
    get: operations["getRoshAnalysis"];
  };
  "/oasys/{prisonNumber}/lifestyle": {
    /** Lifestyle details as held by Oasys */
    get: operations["getLifestyle"];
  };
  "/oasys/{prisonNumber}/psychiatric": {
    /** Psychiatric details as held by Oasys */
    get: operations["getPsychiatric"];
  };
  "/oasys/{prisonNumber}/behaviour": {
    /** Behaviour details as held by Oasys */
    get: operations["getBehaviour"];
  };
  "/oasys/{prisonNumber}/attitude": {
    /** Attitude details as held by Oasys */
    get: operations["getAttitude"];
  };
  "/oasys/{prisonNumber}/health": {
    /** Health details as held by Oasys */
    get: operations["getHealth"];
  };
  "/oasys/{prisonNumber}/learning-needs": {
    /** Learning needs details as held by Oasys */
    get: operations["getLearningNeeds"];
  };
  "/oasys/{prisonNumber}/risks-and-alerts": {
    /** Risks details as held by Oasys */
    get: operations["getRisks"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Course: {
      /** Format: uuid */
      id: string;
      /** @example Thinking skills programme */
      name: string;
      /** @example Thinking Skills Programme (TSP) description */
      description?: string;
      /** @example BNM+ */
      alternateName?: string;
      coursePrerequisites: components["schemas"]["CoursePrerequisite"][];
      /** @example Gang offence */
      audience: string;
      /**
       * @deprecated
       * @default true
       */
      referable: boolean;
    };
    /** CourseRecord */
    CourseRecord: {
      name: string;
      alternateName?: string;
      identifier: string;
      description: string;
      audience: string;
      comments?: string;
      /**
       * @deprecated
       * @default true
       */
      referable: boolean;
    };
    /**
     * @example [
     *   {
     *     "name": "gender",
     *     "description": "female"
     *   },
     *   {
     *     "name": "risk score",
     *     "description": "ORGS: 50+"
     *   },
     *   {
     *     "name": "offence type",
     *     "description": "some offence here"
     *   }
     * ]
     */
    CoursePrerequisite: {
      name: string;
      description: string;
    };
    /** PrerequisiteRecord */
    PrerequisiteRecord: {
      /**
       * @description The name of this Course Prerequisite.
       * @example age
       */
      name: string;
      /**
       * @description The value of this Course Prerequisite.
       * @example 18+
       */
      description?: string;
      /**
       * @description The name of the Course to which this Prerequisite applies. The name must match a course name exactly for this Prerequisite to be added to the Course.
       * @example Kaizen
       */
      course: string;
      /** @example BNM-IPVO */
      identifier: string;
      comments?: string;
    };
    CourseOffering: {
      /** Format: uuid */
      id: string;
      /**
       * @description The unique identifier associated with the location hosting the offering. For prisons, this is the PrisonId, which is usually three capital letters.
       * @example MDI
       */
      organisationId: string;
      /**
       * Format: email
       * @description The email address of a contact for this offering
       * @example ap-admin@digital.justice.gov.uk
       */
      contactEmail: string;
      /**
       * Format: email
       * @description An optional secondary email address of a contact for this offering.
       * @example ap-admin-2@digital.justice.gov.uk
       */
      secondaryContactEmail?: string;
      /** @default true */
      referable: boolean;
    };
    /** OfferingRecord */
    OfferingRecord: {
      /**
       * @description The name of the Course to which this Offering applies. This value is only present to help with comprehension. It is not used to match offerings with courses.
       * @example Kaizen
       */
      course: string;
      /**
       * @description The unique identifier of the Course variant to which this Offering applies. The offering is added to the course having this identifier.
       * @example BNM-IPVO
       */
      identifier: string;
      organisation?: string;
      /**
       * Format: email
       * @description The email address of the contact for this offering.
       * @example ap-admin@digital.justice.gov.uk
       */
      "contact email"?: string;
      /**
       * Format: email
       * @description An optional secondary email address of a contact for this offering.
       * @example ap-admin2@digital.justice.gov.uk
       */
      "secondary contact email"?: string;
      /**
       * @description The prison id for the prison associated with this Offering. This is usually three capital letters.
       * @example MDI
       */
      prisonId: string;
      /** @default true */
      referable: boolean;
    };
    /** @description warnings and errors for a line in an uploaded CSV file. */
    LineMessage: {
      /**
       * @description The number of the line in the CSV file that was rejected. The header line is lineNumber 1, the first line of CSV data is lineNumber 2.
       * @example 20
       */
      lineNumber?: number;
      /**
       * @description One of 'Error' or 'Warning'.  If a line has an Error then the data was not added. If it is a Warning then the line was added but there was a problem that should be corrected.
       * @enum {string}
       */
      level?: "Warning" | "Error";
      /**
       * @description Useful information about the Error or Warning.
       * @example No match for course 'Kaizen', prisonId 'BWI'
       */
      message?: string;
    };
    ErrorResponse: {
      /** @example 404 */
      status: number;
      errorCode?: number;
      /** @example Not found */
      userMessage?: string;
      developerMessage?: string;
      moreInfo?: string;
    };
    CourseParticipationUpdate: {
      /** @description The name of the course taken by the participant. */
      courseName?: string;
      setting?: components["schemas"]["CourseParticipationSetting"];
      outcome?: components["schemas"]["CourseParticipationOutcome"];
      detail?: string;
      source?: string;
    };
    CourseParticipationCreate: components["schemas"]["CourseParticipationUpdate"] & {
      /**
       * @description The prison number of the course participant.
       * @example A1234AA
       */
      prisonNumber: string;
    };
    CourseParticipation: components["schemas"]["CourseParticipationCreate"] & {
      /**
       * Format: uuid
       * @description A unique identifier for this record of participation in a course.
       */
      id: string;
      /** @description The identity of the person who added this CourseParticipation */
      addedBy: string;
      /** @description The date and time at which this CourseParticipation was created. ISO 8601 date-time format. */
      createdAt: string;
    };
    /**
     * @description Either Custody or Community.
     * @enum {string}
     */
    CourseParticipationSettingType: "custody" | "community";
    /** @description Information about where the course was held. */
    CourseParticipationSetting: {
      location?: string;
      type: components["schemas"]["CourseParticipationSettingType"];
    };
    /** @description The outcome of participating in a course. */
    CourseParticipationOutcome: {
      /** @enum {string} */
      status: "incomplete" | "complete";
      yearStarted?: number;
      yearCompleted?: number;
    };
    ReferralCreate: {
      /**
       * Format: uuid
       * @description The id (UUID) of an active offering
       */
      offeringId: string;
      /**
       * @description The prison number of the person who is being referred.
       * @example A1234AA
       */
      prisonNumber: string;
    };
    ReferralUpdate: {
      additionalInformation?: string;
      /** @default false */
      oasysConfirmed: boolean;
      /** @default false */
      hasReviewedProgrammeHistory: boolean;
    };
    Referral: components["schemas"]["ReferralCreate"] & components["schemas"]["ReferralUpdate"] & {
      /**
       * Format: uuid
       * @description The unique id (UUID) of this referral.
       */
      id: string;
      status: components["schemas"]["ReferralStatus"];
      referrerUsername: string;
      submittedOn?: string;
    };
    ReferralCreated: {
      /**
       * Format: uuid
       * @description The unique id (UUID) of the new referral.
       */
      referralId: string;
    };
    ReferralStatusUpdate: {
      status: components["schemas"]["ReferralStatus"];
    };
    /** @enum {string} */
    ReferralStatus: "referral_started" | "referral_submitted" | "awaiting_assessment" | "assessment_started";
    ReferralSummary: {
      /**
       * Format: uuid
       * @description The unique id (UUID) of the new referral.
       */
      id: string;
      /** @description The unique HMPPS username of the user who created this referral. */
      referrerUsername: string;
      courseName: string;
      /** @example Gang offence */
      audience: string;
      status: components["schemas"]["ReferralStatus"];
      submittedOn?: string;
      prisonNumber: string;
      /** @description Name of the prison */
      prisonName?: string;
      /** @description ID of the organisation */
      organisationId?: string;
      sentence?: components["schemas"]["Sentence"];
      /**
       * Format: date
       * @description Earliest release date, if applicable, to this individual. Derived from Sentence information.
       */
      earliestReleaseDate?: string;
      prisonerName?: components["schemas"]["Name"];
    };
    PaginatedReferralSummary: {
      content?: components["schemas"]["ReferralSummary"][];
      totalPages?: number;
      totalElements?: number;
      pageSize?: number;
      pageNumber?: number;
      pageIsEmpty?: boolean;
    };
    Person: {
      /**
       * @description The prison number of the person who is being referred.
       * @example A1234AA
       */
      prisonNumber: string;
    };
    Name: {
      /** @description First name of the person */
      firstName: string;
      /** @description Last name of the person */
      lastName: string;
    };
    Sentence: {
      /**
       * Format: date
       * @description Conditional release date
       */
      conditionalReleaseDate?: string;
      /**
       * Format: date
       * @description Tariff expiry date
       */
      tariffExpiryDate?: string;
      /**
       * Format: date
       * @description Parole eligibility date
       */
      paroleEligibilityDate?: string;
      /** @description Indicates if it's an indeterminate sentence */
      indeterminateSentence?: boolean;
      /** @description Non-DTO release date type */
      nonDtoReleaseDateType?: string;
    };
    OffenceDetail: {
      /** @example Armed robbery */
      offenceDetails?: string;
      /** @default false */
      contactTargeting?: boolean;
      /** @default false */
      raciallyMotivated?: boolean;
      /** @default false */
      revenge?: boolean;
      /** @default false */
      domesticViolence?: boolean;
      /** @default false */
      repeatVictimisation?: boolean;
      /** @default false */
      victimWasStranger?: boolean;
      /** @default false */
      stalking?: boolean;
      /** @default false */
      recognisesImpact?: boolean;
      /** @default 0 */
      numberOfOthersInvolved?: number;
      /** @example There were two others involved who absconded at the scene */
      othersInvolvedDetail?: string;
      /** @example This person is easily lead */
      peerGroupInfluences?: string;
      /** @example Drug misuse fuels this persons motivation */
      motivationAndTriggers?: string;
      /** @default false */
      acceptsResponsibility?: boolean;
      /** @example This person fully accepts their actions */
      acceptsResponsibilityDetail?: string;
      /** @example This person has a long history of robbery */
      patternOffending?: string;
    };
    Relationships: {
      /** @default false */
      dvEvidence?: boolean;
      /** @default false */
      victimFormerPartner?: boolean;
      /** @default false */
      victimFamilyMember?: boolean;
      /** @default false */
      victimOfPartnerFamily?: boolean;
      /** @default false */
      perpOfPartnerOrFamily?: boolean;
      /** @example This person has a history of domestic violence */
      relIssuesDetails?: string;
    };
    RoshAnalysis: {
      /** @example Tax evasion */
      offenceDetails?: string;
      /** @example at home */
      whereAndWhen?: string;
      /** @example false accounting */
      howDone?: string;
      /** @example hmrc */
      whoVictims?: string;
      /** @example company secretary */
      anyoneElsePresent?: string;
      /** @example Greed */
      whyDone?: string;
      /** @example crown court */
      sources?: string;
    };
    Lifestyle: {
      /** @example Drug addiction */
      activitiesEncourageOffending?: string;
      /** @example Commits robbery to fund drug addiction */
      lifestyleIssues?: string;
    };
    Psychiatric: {
      /** @example 0-No problems */
      description?: string;
    };
    Behaviour: {
      /** @example 0-No problems */
      temperControl?: string;
      /** @example 0-No problems */
      problemSolvingSkills?: string;
      /** @example 0-No problems */
      awarenessOfConsequences?: string;
      /** @example 0-No problems */
      achieveGoals?: string;
      /** @example 0-No problems */
      understandsViewsOfOthers?: string;
      /** @example 0-No problems */
      concreteAbstractThinking?: string;
    };
    Attitude: {
      /** @example 0-No problems */
      proCriminalAttitudes?: string;
      /** @example 0-No problems */
      motivationToAddressBehaviour?: string;
    };
    Health: {
      /** @default false */
      anyHealthConditions?: boolean;
      /** @example Blind in one eye */
      description?: string;
    };
    LearningNeeds: {
      /** @default false */
      noFixedAbodeOrTransient?: boolean;
      /** @example 0-No problems */
      workRelatedSkills?: string;
      /** @example 0-No problems */
      problemsReadWriteNum?: string;
      /** @example 0-No problems */
      learningDifficulties?: string;
      /** @example 0-Any qualifications */
      qualifications?: string;
      /** @example 6 */
      basicSkillsScore?: string;
    };
    Risks: {
      /** @example 45 */
      ogrsYear1?: number;
      /** @example 65 */
      ogrsYear2?: number;
      /** @example High */
      ogrsRisk?: string;
      /** @example 23 */
      ovpYear1?: number;
      /** @example 32 */
      ovpYear2?: number;
      /** @example Medium */
      ovpRisk?: string;
      /** @example 3.45 */
      rsrScore?: number;
      /** @example Medium */
      rsrRisk?: string;
      /** @example Low */
      ospcScore?: string;
      /** @example High */
      ospiScore?: string;
      /** @example Low */
      overallRoshLevel?: string;
      /** @example Medium */
      riskPrisonersCustody?: string;
      /** @example Medium */
      riskStaffCustody?: string;
      /** @example Medium */
      riskKnownAdultCustody?: string;
      /** @example Medium */
      riskPublicCustody?: string;
      /** @example Medium */
      riskChildrenCustody?: string;
      /** @example Medium */
      riskStaffCommunity?: string;
      /** @example Medium */
      riskKnownAdultCommunity?: string;
      /** @example Medium */
      riskPublicCommunity?: string;
      /** @example Medium */
      riskChildrenCommunity?: string;
      /** @example Low */
      imminentRiskOfViolenceTowardsPartner?: string;
      /** @example Low */
      imminentRiskOfViolenceTowardsOthers?: string;
      alerts?: components["schemas"]["Alert"][];
    };
    Alert: {
      /** @example Violence */
      description?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** List all courses */
  getAllCourses: {
    responses: {
      /** @description Return a JSON representation of all courses that are not withdrawn. */
      200: {
        content: {
          "application/json": components["schemas"]["Course"][];
        };
      };
    };
  };
  /** List all courses */
  getCoursesCsv: {
    responses: {
      /** @description Return a CSV format representation of all courses that are not withdrawn. The data is compatible with the PUT /courses endpoint and may be round-tripped. */
      200: {
        content: {
          "text/csv;charset=UTF-8": components["schemas"]["CourseRecord"][];
        };
      };
    };
  };
  /** Upload a CSV format file containing a full set of Courses data. */
  updateCourses: {
    requestBody: {
      content: {
        "text/csv;charset=UTF-8": components["schemas"]["CourseRecord"][];
      };
    };
    responses: {
      /** @description Successful update */
      204: {
        content: never;
      };
      /** @description Bad input */
      400: {
        content: never;
      };
    };
  };
  /** Get all unique course names */
  getAllCourseNames: {
    responses: {
      /** @description Return a JSON representation of all unique course names that are not withdrawn. */
      200: {
        content: {
          "application/json": string[];
        };
      };
    };
  };
  /** Download a CSV format representation of the current set of prerequisites. */
  getPrerequisitesCsv: {
    responses: {
      /** @description The CSV formatted data is compatible with the PUT operation and may be round-tripped. */
      200: {
        content: {
          "text/csv;charset=UTF-8": components["schemas"]["PrerequisiteRecord"][];
        };
      };
    };
  };
  /**
   * Upload a CSV format file containing a full set of prerequisites data for the current set of courses.
   * @description Accepts a CSV format file of data representing the desired state of all prerequisite data attached to the current set of courses. <p>Pre-existing prerequisite data will be removed before the new data is applied. <p>The first row of CSV data is treated as a header row.  The column headings in the header row must much the names of the fields in the PrerequisiteRecord schema. Column order is not important.
   */
  updatePrerequisites: {
    requestBody: {
      content: {
        "text/csv;charset=UTF-8": components["schemas"]["PrerequisiteRecord"][];
      };
    };
    responses: {
      /** @description Successful update */
      200: {
        content: {
          "application/json": components["schemas"]["LineMessage"][];
        };
      };
      /** @description Bad input */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Details for a single course */
  getCourseById: {
    parameters: {
      path: {
        /** @description A course identifier */
        id: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Course"];
        };
      };
    };
  };
  /** List all offerings for a course */
  getAllOfferingsByCourseId: {
    parameters: {
      path: {
        /** @description A course identifier */
        id: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["CourseOffering"][];
        };
      };
    };
  };
  /** List all courses for an organisationId */
  getAllCoursesByOrganisationId: {
    parameters: {
      path: {
        /** @description A organisation identifier */
        organisationId: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Course"][];
        };
      };
    };
  };
  /** Download all Offerings in CSV format */
  getOfferingsCsv: {
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "text/csv;charset=UTF-8": components["schemas"]["OfferingRecord"][];
        };
      };
    };
  };
  /**
   * Upload all offerings in CSV format.
   * @description Accepts a CSV format file of data representing the desired state of all offerings data attached to the current set of courses. <p>Pre-existing offering data will be removed before the new data is applied. <p>The first row of CSV data is treated as a header row.  The column headings in the header row must much the names of the fields in the OfferingRecord schema. Column order is not important.
   */
  updateOfferings: {
    requestBody: {
      content: {
        "text/csv;charset=UTF-8": components["schemas"]["OfferingRecord"][];
      };
    };
    responses: {
      /** @description Successful update */
      204: {
        content: {
          "application/json": components["schemas"]["LineMessage"][];
        };
      };
      /** @description Bad input */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Details for a single course offering */
  getOfferingById: {
    parameters: {
      path: {
        /** @description A course offering identifier */
        id: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["CourseOffering"];
        };
      };
      /** @description Unauthorised. The request was unauthorised. */
      401: {
        content: never;
      };
      /** @description Forbidden.  The client is not authorised to access this offering. */
      403: {
        content: never;
      };
      /** @description Invalid course offering id */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Retrieve some referrals */
  getReferrals: {
    parameters: {
      query?: {
        /** @description If present, only return referrals in the given state */
        status?: components["schemas"]["ReferralStatus"];
        /** @description The id (UUID) of an active offering. If present, only return referrals for that offering. */
        offeringId?: string;
        /**
         * @description The prison number of the person who is being referred. If present, only return referrals for the person.
         * @example A1234AA
         */
        prisonNumber?: string;
      };
    };
    responses: {
      /** @description Returns information about matching referrals */
      200: {
        content: {
          "application/json": components["schemas"]["Referral"][];
        };
      };
      /** @description The request was unauthorised */
      401: {
        content: never;
      };
      /** @description Forbidden.  The client is not authorised to access referrals. */
      403: {
        content: never;
      };
    };
  };
  /** Start a referral */
  createReferral: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReferralCreate"];
      };
    };
    responses: {
      /** @description Started referral */
      201: {
        content: {
          "application/json": components["schemas"]["ReferralCreated"];
        };
      };
      /** @description Bad input */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Unauthorised. The request was unauthorised. */
      401: {
        content: never;
      };
    };
  };
  /** Retrieve a referral */
  getReferralById: {
    parameters: {
      path: {
        /** @description The id (UUID) of a referral */
        id: string;
      };
    };
    responses: {
      /** @description Information about the referral */
      200: {
        content: {
          "application/json": components["schemas"]["Referral"];
        };
      };
      /** @description The request was unauthorised */
      401: {
        content: never;
      };
      /** @description Forbidden.  The client is not authorised to access this referral. */
      403: {
        content: never;
      };
      /** @description The referral does not exist */
      404: {
        content: never;
      };
    };
  };
  /** Update a referral */
  updateReferralById: {
    parameters: {
      path: {
        /** @description The id (UUID) of a referral */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReferralUpdate"];
      };
    };
    responses: {
      /** @description The referral was updated */
      204: {
        content: never;
      };
      /** @description The request was unauthorised */
      401: {
        content: never;
      };
      /** @description Forbidden.  The client is not authorised to access this referral. */
      403: {
        content: never;
      };
      /** @description The referral does not exist */
      404: {
        content: never;
      };
    };
  };
  /** Change a referral's status */
  updateReferralStatusById: {
    parameters: {
      path: {
        /** @description The id (UUID) of a referral */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReferralStatusUpdate"];
      };
    };
    responses: {
      /** @description The referral now has the requested status. */
      204: {
        content: never;
      };
      /** @description The request was unauthorised. */
      401: {
        content: never;
      };
      /** @description Forbidden.  The client is not authorised to access this referral. */
      403: {
        content: never;
      };
      /** @description The referral does not exist. */
      404: {
        content: never;
      };
      /** @description The referral may not change its status to the supplied value. */
      409: {
        content: never;
      };
    };
  };
  /** Submit a completed referral */
  submitReferralById: {
    parameters: {
      path: {
        /** @description The id (UUID) of a referral */
        id: string;
      };
    };
    responses: {
      /** @description Submitted a completed referral. */
      204: {
        content: never;
      };
      /** @description The request was unauthorised. */
      401: {
        content: never;
      };
      /** @description Forbidden. The client is not authorised to access this referral. */
      403: {
        content: never;
      };
      /** @description The referral does not exist. */
      404: {
        content: never;
      };
    };
  };
  /** Get paginated referrals by organisationId */
  getReferralSummariesByOrganisationId: {
    parameters: {
      query?: {
        /** @description Page number of the requested page */
        page?: number;
        /** @description Number of items per page */
        size?: number;
        /** @description Filter by the status of the referral */
        status?: string[];
        /** @description Filter by the audience of the referral */
        audience?: string;
        /** @description Filter by the name of the course associated with this referral */
        courseName?: string;
      };
      path: {
        /** @description The organisationId of an organisation */
        organisationId: string;
      };
    };
    responses: {
      /** @description Paginated summary of referrals for an organisation */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedReferralSummary"];
        };
      };
      /** @description The request was unauthorised */
      401: {
        content: never;
      };
      /** @description Not authorised to access this endpoint/these referrals */
      403: {
        content: never;
      };
      /** @description No referrals for supplied organisationId (Not Found). */
      404: {
        content: never;
      };
    };
  };
  /** Get paginated referrals by logged in user */
  getReferralSummariesByUsername: {
    parameters: {
      query?: {
        /** @description Page number of the requested page */
        page?: number;
        /** @description Number of items per page */
        size?: number;
        /** @description Filter by the status of the referral */
        status?: string[];
        /** @description Filter by the audience of the referral */
        audience?: string;
        /** @description Filter by the name of the course associated with this referral */
        courseName?: string;
      };
    };
    responses: {
      /** @description Paginated summary of referrals for logged in user */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedReferralSummary"];
        };
      };
      /** @description The request was unauthorised */
      401: {
        content: never;
      };
      /** @description Not authorised to access this endpoint/these referrals */
      403: {
        content: never;
      };
      /** @description No referrals for logged in user (Not Found). */
      404: {
        content: never;
      };
    };
  };
  /** Retrieve the course that owns an offering. */
  getCourseByOfferingId: {
    parameters: {
      path: {
        /** @description The id (UUID) of an offering. */
        id: string;
      };
    };
    responses: {
      /** @description Information about the Course that owns the offering. */
      200: {
        content: {
          "application/json": components["schemas"]["Course"];
        };
      };
      /** @description The request was unauthorised */
      401: {
        content: never;
      };
      /** @description Forbidden.  The client is not authorised to access this offering. */
      403: {
        content: never;
      };
      /** @description No offering has the supplied id (Not Found). */
      404: {
        content: never;
      };
    };
  };
  /** Record information about a person's prior participation in a course. */
  createCourseParticipation: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CourseParticipationCreate"];
      };
    };
    responses: {
      /** @description The course participation information has been added. */
      201: {
        content: {
          "application/json": components["schemas"]["CourseParticipation"];
        };
      };
      /** @description Bad input */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description The client is not authorized to perform this operation. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Return information about a person's participation in a course. Selected by a unique identifier. */
  getCourseParticipationById: {
    parameters: {
      path: {
        /** @description The unique identifier assigned to this record when it was created. */
        id: string;
      };
    };
    responses: {
      /** @description The selected course participation record. */
      200: {
        content: {
          "application/json": components["schemas"]["CourseParticipation"];
        };
      };
      /** @description The client is not authorised to perform this operation. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Update the information about a person's participation in a course. */
  updateCourseParticipationById: {
    parameters: {
      path: {
        /** @description The unique identifier assigned to this record when it was created. */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CourseParticipationUpdate"];
      };
    };
    responses: {
      /** @description The information about a person's participation in a course has been updated. */
      200: {
        content: {
          "application/json": components["schemas"]["CourseParticipation"];
        };
      };
      /** @description The client is not authorized to perform this operation. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description There is no information for the id, so it cannot be updated. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Delete information about a person's participation in a course. */
  deleteCourseParticipationById: {
    parameters: {
      path: {
        /** @description The unique identifier assigned to this record when it was created. */
        id: string;
      };
    };
    responses: {
      /** @description The information about a person's participation in a course has been deleted. */
      204: {
        content: never;
      };
      /** @description The client is not authorized to perform this operation. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Retrieve course participation information for a person identified by their prison number. */
  getCourseParticipationsByPrisonNumber: {
    parameters: {
      path: {
        /**
         * @description The prison number of the person for whom the information should be retrieved.
         * @example A1234AA
         */
        prisonNumber: string;
      };
    };
    responses: {
      /** @description All historic course participation information for the person.  Empty if none found. */
      200: {
        content: {
          "application/json": components["schemas"]["CourseParticipation"][];
        };
      };
      /** @description The client is not authorised to perform this operation. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Offence details as held by Oasys */
  getOffenceDetails: {
    parameters: {
      path: {
        /**
         * @description Prison nomis identifier
         * @example A1234AA
         */
        prisonNumber: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["OffenceDetail"];
        };
      };
      /** @description Unauthorised. The request was unauthorised. */
      401: {
        content: never;
      };
      /** @description Forbidden.  The client is not authorised to access person. */
      403: {
        content: never;
      };
      /** @description Invalid prison number */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Relationships details as held by Oasys */
  getRelationships: {
    parameters: {
      path: {
        /**
         * @description Prison nomis identifier
         * @example A1234AA
         */
        prisonNumber: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Relationships"];
        };
      };
      /** @description Unauthorised. The request was unauthorised. */
      401: {
        content: never;
      };
      /** @description Forbidden.  The client is not authorised to access person. */
      403: {
        content: never;
      };
      /** @description Invalid prison number */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** ROSH analysis details as held by Oasys */
  getRoshAnalysis: {
    parameters: {
      path: {
        /**
         * @description Prison nomis identifier
         * @example A1234AA
         */
        prisonNumber: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["RoshAnalysis"];
        };
      };
      /** @description Unauthorised. The request was unauthorised. */
      401: {
        content: never;
      };
      /** @description Forbidden.  The client is not authorised to access person. */
      403: {
        content: never;
      };
      /** @description Invalid prison number */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Lifestyle details as held by Oasys */
  getLifestyle: {
    parameters: {
      path: {
        /**
         * @description Prison nomis identifier
         * @example A1234AA
         */
        prisonNumber: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Lifestyle"];
        };
      };
      /** @description Unauthorised. The request was unauthorised. */
      401: {
        content: never;
      };
      /** @description Forbidden.  The client is not authorised to access person. */
      403: {
        content: never;
      };
      /** @description Invalid prison number */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Psychiatric details as held by Oasys */
  getPsychiatric: {
    parameters: {
      path: {
        /**
         * @description Prison nomis identifier
         * @example A1234AA
         */
        prisonNumber: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Psychiatric"];
        };
      };
      /** @description Unauthorised. The request was unauthorised. */
      401: {
        content: never;
      };
      /** @description Forbidden.  The client is not authorised to access person. */
      403: {
        content: never;
      };
      /** @description Invalid prison number */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Behaviour details as held by Oasys */
  getBehaviour: {
    parameters: {
      path: {
        /**
         * @description Prison nomis identifier
         * @example A1234AA
         */
        prisonNumber: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Behaviour"];
        };
      };
      /** @description Unauthorised. The request was unauthorised. */
      401: {
        content: never;
      };
      /** @description Forbidden.  The client is not authorised to access person. */
      403: {
        content: never;
      };
      /** @description Invalid prison number */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Attitude details as held by Oasys */
  getAttitude: {
    parameters: {
      path: {
        /**
         * @description Prison nomis identifier
         * @example A1234AA
         */
        prisonNumber: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Attitude"];
        };
      };
      /** @description Unauthorised. The request was unauthorised. */
      401: {
        content: never;
      };
      /** @description Forbidden.  The client is not authorised to access person. */
      403: {
        content: never;
      };
      /** @description Invalid prison number */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Health details as held by Oasys */
  getHealth: {
    parameters: {
      path: {
        /**
         * @description Prison nomis identifier
         * @example A1234AA
         */
        prisonNumber: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Health"];
        };
      };
      /** @description Unauthorised. The request was unauthorised. */
      401: {
        content: never;
      };
      /** @description Forbidden.  The client is not authorised to access person. */
      403: {
        content: never;
      };
      /** @description Invalid prison number */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Learning needs details as held by Oasys */
  getLearningNeeds: {
    parameters: {
      path: {
        /**
         * @description Prison nomis identifier
         * @example A1234AA
         */
        prisonNumber: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["LearningNeeds"];
        };
      };
      /** @description Unauthorised. The request was unauthorised. */
      401: {
        content: never;
      };
      /** @description Forbidden.  The client is not authorised to access person. */
      403: {
        content: never;
      };
      /** @description Invalid prison number */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Risks details as held by Oasys */
  getRisks: {
    parameters: {
      path: {
        /**
         * @description Prison nomis identifier
         * @example A1234AA
         */
        prisonNumber: string;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Risks"];
        };
      };
      /** @description Unauthorised. The request was unauthorised. */
      401: {
        content: never;
      };
      /** @description Forbidden.  The client is not authorised to access person. */
      403: {
        content: never;
      };
      /** @description Invalid prison number */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
}
